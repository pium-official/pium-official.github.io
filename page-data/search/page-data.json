{"componentChunkName":"component---src-pages-search-jsx","path":"/search/","result":{"data":{"allMarkdownRemark":{"nodes":[{"excerpt":"이 글은 우테코 피움팀 크루 '주노'가 작성했습니다. 서론 피움팀의 기술블로그를 만들기까지의 험난한 과정을 정리해보려고 한다. 플랫폼 선정 팀 블로그를 작성하기 위해 다양한 플랫폼들을 고려해봤다. 티스토리 티스토리는 팀 블로그 기능을 통해 다양한 작성자 및 관리자를 지정할 수 있다. 하지만 UI를 직접 수정할 수 없을 뿐더러 제공되어있는 스킨들이 대부분 …","fields":{"slug":"/blog-starter/"},"frontmatter":{"date":"July 09, 2023","title":"피움 블로그 생성과정","tags":["블로그","세팅"]},"rawMarkdownBody":"\n> 이 글은 우테코 피움팀 크루 '[주노](https://github.com/Choi-JJunho)'가 작성했습니다.\n \n\n## 서론\n\n피움팀의 기술블로그를 만들기까지의 험난한 과정을 정리해보려고 한다.\n\n## 플랫폼 선정\n\n팀 블로그를 작성하기 위해 다양한 플랫폼들을 고려해봤다.\n\n### 티스토리\n\n티스토리는 팀 블로그 기능을 통해 다양한 작성자 및 관리자를 지정할 수 있다.\n\n하지만 UI를 직접 수정할 수 없을 뿐더러 제공되어있는 스킨들이 대부분 마음에 들지 않았다.\n\nUI 선정과정에 너무많은 힘을 들일 것 같아서 티스토리는 사용하지 않았다.\n\n### Notion\n\n현재 팀 문서 정리를 Notion으로 관리하고있다.\n\n자유롭게 템플릿을 관리할 수 있어서 가장 매력적으로 다가온 툴이였지만 SEO를 적용하지 못하고, 도메인을 별도로 지정해야한다는 단점이 있어 선택하지 않았다.\n\n> 중간에 vercel에서 제공하는 notion 배포기능을 사용하는 방식이 있었지만 Organizaiton으로 레포지토리를 관리하고 있는 현재 상황에서 해당 서비스를 이용하려면 유료였기 때문에 해당 부분도 사용하지 못했다.\n[Notion-backed Next.js Blog](https://vercel.com/templates/next.js/notion-blog)\n\n\n### Velog\n\n팀 계정을 생성해서 Velog에 글을 게시하는 방법을 생각해봤다.\n\n팀 계정을 생성한다는 부분에서 팀 프로젝트가 계속 진행되면서 계정을 관리하는 리소스가 추가되는것이 우려되었기 때문에 선택하지 않았다.\n\n\n### GitBook\n\nGitBook을 이용해서 팀 블로그를 운영할 수도 있겠지만 UI 구성적인 측면에서 기술블로그와는 거리가 멀었기 때문에 선택하지 않았다.\n\n\n### GitHub Pages\n\n정적인 페이지를 무료로 호스팅할 수 있고, 마음만 먹으면 자유롭게 커스터마이징 할 수 있는 환경이라는 부분이 매력있게 다가와 GitHub Pages를 선택했다.\n\n## GitHub Pages로 팀 블로그 만들기\n\n이제 본격적으로 GitHub Pages를 이용하여 팀 블로그를 만드는 과정을 차근차근 따라가보자.\n\ngatsby를 이용하여 블로그 배포를 진행했다. 사용한 템플릿은 gatsby-starter-hoodie이며 블로그에 친절하게 사용법이 게시되어있다.\n\n[🐙 gatsby-starter-hoodie](https://github.com/devHudi/gatsby-starter-hoodie)\n[🚀 gatsby-starter-hoodie 사용 방법 보러가기](https://hoodie.gatsbyjs.io/about-hoodie-kr/)\n\n> 필자는 gatsby에 대해 아무것도 모르는 상태로 해당 작업을 진행했습니다. 😵‍💫\n최대한 알기 쉽게 정리하려고 노력했습니다만... 잘못된 부분이 있다면 댓글로 남겨주시면 감사하겠습니다.\n\n### gatsby란?\n\n우선 사용하고자하는 gatsby가 무엇인지부터 알고 진행해보자.\n\n[위키백과](https://en.wikipedia.org/wiki/Gatsby_(JavaScript_framework))에 따르면\n\n**개츠비는 React와 GraphQL을 사용하여 Node.js 위에 구축된 오픈소스 정적 사이트 생성기입니다.**\n\n라고 설명되어있다.\n\n`Node.js 위에 구축된` 해당 문구로부터 로컬 환경에 Node.js가 필요하다는 것을 알 수 있다.\n\n### node 설치하기\n\n```shell\nbrew install node\n```\n\n![](.index_images/dd266184.png)\n\n`node -v` 명령어를 통해 잘 설치되었는지 확인해본다.\n\n### npx 설치하기\n\n리액트를 공부하자는 글이 아니기 때문에 간단히만 알고 넘어가자\n\nnpx는 npm 사용시에 발생하는 발생할 수 있는 여러 문제점을 해결하기 위해 설계되었다고한다.\n진행하는 과정에서 npx를 사용할 것이기 때문에 npx도 설치하고 넘어가자.\n\n```shell\nnpm install npx -g\n```\n\n![](.index_images/ff1c3736.png)\n\n`npx -v` 명령어를 통해 잘 설치되었는지 확인해본다.\n\n### gatsby-cli 설치하기\n\ngatsby 명령어를 사용하기 위해 gatsby-cli를 설치한다.\n\n```shell\nnpm install -g gatsby-cli\n```\n\n![](.index_images/6494ac93.png)\n\n`gatsby -v` 명령어를 통해 잘 설치되었는지 확인해본다.\n\n### Gatsby 사이트 생성\n\n> 여기서부터는 [Hudi의 Gatsby 환경 구성하기](https://hoodie.gatsbyjs.io/quick-start-kr/)를 따라가는 내용입니다.\n\n> 환경은 Pium의 프로젝트 환경에 맞게 진행됩니다.\n\ngatsby를 이용하여 새로운 사이트를 생성한다.\n이때 `gatsby-starter-hoodie`를 참고하여 구성한다.\n\n```node\nnpx gatsby new pium-official.github.io https://github.com/devHudi/gatsby-starter-hoodie\n```\n\n### 프로젝트 시작해보기\n\n``` shell\ncd pium-official.github.io\n\nnpm run start\n```\n\n![](.index_images/19f5a8e2.png)\n\n`localhost:8000`으로 프로젝트가 열리는 모습을 볼 수 있다.\n\n![](.index_images/7810b698.png)\n\n### 블로그 커스텀하기\n\n해당 부분은 원작자의 [🚀 2.빠르게 시작하기](https://hoodie.gatsbyjs.io/quick-start-kr/)를 참고하여 진행하면 된다.\n\n### GitHub Pages로 배포하기\n\n이제 배포할 페이지를 다 만들었다!\nGitHub Pages를 이용해 배포를 진행해보자.\n\n우선 GitHub Repository를 생성한다.\n\n> pium-official Organization에서 `pium-official.github.io` 레포지토리를 생성했다.\n\n![](.index_images/b084df05.png)\n\n```shell\ngit remote add origin https://github.com/pium-official/pium-official.github.io\n```\n\n```node\nnpm run deploy-gh\n```\n\n위 명령어를 수행하면 팀 레포지토리에 gh-pages 브랜치가 생성되고 build된 결과물이 올라온다. 해당 파일을 기준으로 GitHub Pages에서 배포를 진행한다.\n\n![](.index_images/3db58ec3.png)\n\n> GitHub Pages에서 배포 기준으로 잡는 브랜치를 확인 & 변경하고 싶다면 Settings - Pages 에서 다음 항목을 확인하면 된다.\n> ![](.index_images/b9a5c99c.png)\n\n![](.index_images/1877666d.png)\n\nGitHub Actions 탭에서 `pages build and deployment` 작업이 완료된것을 확인하고 https://pium-official.github.io/ 로 접속해보면 페이지가 성공적으로 배포된것을 확인할 수 있다!!\n\n> https:://{팀 레포명}.github.io\n\n![](.index_images/f35d015e.png)\n\n### 글 작성하기\n\n해당 템플릿에 글을 작성하는 방식은 원작자의 [🤔 3. 작성 가이드](https://hoodie.gatsbyjs.io/writing-guide-kr/)를 참고하면 된다.\n\n### GitHub Actions workflow\n\n현재까지 진행한 작업으로는 다음과 같은 흐름으로 배포를 진행할 수 있다.\n\n1. 로컬에서 글을 작성한다.\n2. 글을 작성한 뒤 `npm run deploy-gh` 명령어를 수행해서 배포를 진행한다.\n\n위 방식은 혼자서 작업할 때는 문제가 없으나 여러명이 함께 글을 작성하기에는 많이 번거롭다.\n\n우리는 다음과 같은 방식으로 배포를 하는 방향을 기대하고 있다.\n\n1. 로컬에서 글을 작성한다.\n2. 글을 작성한 뒤 main 브랜치로 push한다.\n3. main 브랜치에 작업내용이 push 되었을 때 빌드 및 배포가 자동적으로 이뤄진다.\n\n위에서 3번 작업내용을 수행하기 위해 GitHub Actions의 workflow 기능을 이용할 수 있다.\n\n### workflow 작성하기\n\n`gatsby-starter-hoodie`에서 기본적으로 제공하고 있는 workflow는 다음과 같이 구성되어있다.\n\n```yml\nname: CI\n\non:\n  pull_request:\n    branches:\n      - main\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n      - uses: actions/setup-node@v2\n        with:\n          node-version: 20.3.1\n\n      - name: Install node packages\n        run: yarn\n        \n      - name: Check lint\n        run: yarn check:lint\n        \n      - name: Check prettier\n        run: yarn check:prettier\n      \n      - name: Build\n        run: yarn build\n```\n\n> 자세한 구문에 대한 설명 및 내용은 [공식문서](https://docs.github.com/ko/actions/using-workflows/workflow-syntax-for-github-actions)를 참고해보면 좋다.\n\n기존에 존재하는 ci.yml 파일은 삭제하고 아래와 같은 deploy.yml을 작성해보자.\n\n> workflow에 대한 yml파일의 경로는 반드시 `.github/workflows` 폴더 내부에 존재해야한다.\n> ![](.index_images/d9fc2f50.png)\n \n\n```yml\nname: Deploy\n\non: # 어떤 작업이 수행될 때 deploy.yml 작업이 수행된다. (트리거)\n  push: # push 작업이 수행될 때\n    branches: # 특정 브랜치를 대상으로\n      - main\n\npermissions: # github action이 수행되는 환경에서 특정 권한을 준다\n  contents: write\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n      - uses: actions/setup-node@v2\n        with:\n          node-version: 20.3.1\n\n      - name: Install node packages\n        run: yarn\n\n      - name: Build\n        run: yarn build\n\n      - name: Deploy 🚀\n        uses: JamesIves/github-pages-deploy-action@v4\n        with:\n          folder: public\n```\n\n> `JamesIves/github-pages-deploy-action@v4` 작업에서 수행하는 내용 중 쓰기권한을 요구하는 작업이 있기 때문에 permissions 설정을 해야한다.\n[관련 이슈 - Failed with exit code 128, Permission Denied](https://github.com/JamesIves/github-pages-deploy-action/issues/1110)\n\n위 deploy.yml 파일을 작성했다면 프로젝트 내부에서 변경사항에 대한 commit을 수행하고 git push를 해본다.\n\n``` shell\ngit branch -m main\n\ngit push origin main\n```\n\n![](.index_images/0491f96f.png)\n\n위 내용을 대략적으로 설명해보자면 다음과 같다.\n\nmain 브랜치에 대한 코드를 build해보고 성공한다면 결과물을 gh-pages 브랜치로 배포한다.\n\n이제 글을 작성하고 main 브랜치로 push하기만 하면 배포까지 자동으로 수행된다.\n로컬에서 `npm run deploy-gh`는 더이상 사용할 필요가 없다.\n\n## 결론\n\n블로그를 생성하고 배포하고 자동화하는 과정까지 차근차근 진행해봤다.\n\n여러버 삽질을 거친 끝에 완성했기 때문에 더 애정이 많이 가는 것 같다. 👍\n\n## Reference\n\nhttps://hoodie.gatsbyjs.io/\nhttps://docs.github.com/ko/actions/using-workflows/workflow-syntax-for-github-actions\nhttps://studium-anywhere.tistory.com/21\n"},{"excerpt":"이 글은 우테코 피움팀 크루 '주노'가 작성했습니다. 서론 기획부터 개발까지 하나의 프로그램이 생성되는 모든 프로세스를 경험할 수 있는 시간을 가졌다. 피움팀에서 어떤 방식을 통해 아이디어와 기능을 도출해나갔는지 기록해두고자 한다. 스프린트란? 스프린트는 팀이 일정량의 작업을 완료하는 시간이 정해진 짧은 기간을 의미한다. 여기서는 기획부터 데모수준의 프로…","fields":{"slug":"/sprint-idea/"},"frontmatter":{"date":"July 08, 2023","title":"구글 스프린트 기반 아이디어 도출","tags":["아이디어","기획"]},"rawMarkdownBody":"\n> 이 글은 우테코 피움팀 크루 '[주노](https://github.com/Choi-JJunho)'가 작성했습니다.\n\n## 서론\n\n기획부터 개발까지 하나의 프로그램이 생성되는 모든 프로세스를 경험할 수 있는 시간을 가졌다.\n\n피움팀에서 어떤 방식을 통해 아이디어와 기능을 도출해나갔는지 기록해두고자 한다.\n\n## 스프린트란?\n\n스프린트는 팀이 일정량의 작업을 완료하는 시간이 정해진 짧은 기간을 의미한다.\n\n여기서는 기획부터 데모수준의 프로그램이 나오는 단계까지를 하나의 스프린트라고 생각해볼 수 있겠다.\n\n피움 팀은 구글 스프린트의 방법론을 차용해서 기능을 도출했다.\n\n### 구글 스프린트\n\n![](.index_images/googlesprint.png)\n\n5일간 결과물을 도출하는 방법론으로 다음과 같은 17단계로 이어진다.\n\n1. 현재 상황에 대한 구성원들의 생각과 문제 상황 공유\n2. 스프린트를 통해 해결하고자 하는 목표 설정\n3. 스프린트 질문 도출\n4. 이해관계자의 구매 여정 Map 작성\n5. 전문가 조언\n6. HMW(어떻게 하면 ~할 수 있을까) 작성 및 선정\n7. 스프린트 기간에 주력하고자 하는 1순위 타깃과 질문 선정\n8. 번갯불 대화 및 솔루션 스케치\n9. 고객 선정을 위한 설문지 작성\n10. 프로토타입 제작을 위한 최종 솔루션 선정\n11. 프로토타입 제작을 위한 스토리보드 만들기\n12. 프로토타입 제작\n13. 프로토타입 완성 및 시연\n14. 고객 인터뷰용 질문 만들기 (인터뷰 담당자)\n15. 타깃 고객 인터뷰 및 학습\n16. 스프린트 이후의 개발 플랜 점검 및 향후 일정 논의\n17. 성찰\n\n### Figma - Figjam\n\n오프라인 환경에서 종이, 캔버스, 포스트잇을 이용해서 각자의 의견을 종합해볼 수도 있지만 시간, 공간적 제약이 있을 때는 Figma를 사용해볼 수도 있다.\n\n디자인 툴인 Figma에는 Figjam이라는 기능을 제공한다.\n\n![](.index_images/figjam.png)\n\nFigjam에서는 포스트잇, 연필그리기, 스티커붙이기, 타이머 등의 기능들을 제공한다.\n\n> 개인적으로 타이머 기능을 적극 활용하는 것이 좋다고 생각했다.\n위 [구글 스프린트](###구글-스프린트)의 `8. 번갯불 대화 및 솔루션 스케치` 항목에서 추구하는 목적이 무엇인지 생각해보면 정해진 시간내로 서로의 의견을 제시하여 회의가 늘어지지 않게 하기 위함임을 알 수 있다.\n정해야할 내용이 많은 만큼 시간이 늘어지는 것만큼은 가장 경계해야한다고 생각한다.\n\n## 서비스 주제\n\n![](.index_images/b95b5dfe.png)\n\n`식물을 잘 키울 수 있도록 도와주는 서비스`라는 주제로 팀이 이뤄졌다.\n\n위 포스터를 확인했을 때 큰 주제로 추상적인 목표들이 즐비해있음을 확인할 수 있다.\n주어진 시간이 짧기 때문에 핵심기능을 추려야할 필요가 있다.\n\n> 💡 모든 과정을 진행할 때 이야기를 듣는 사람들은 형광펜 혹은 스티커 기능을 이용해 중요하다고 생각하는 부분에 색칠을 하며 듣는다. 형광펜과 스티커를 이용한 호응을 이용해 공통 관심사에 집중할 수 있으며 집중력이 분산되는 것도 예방할 수 있다.\n\n> ⏰ 모든 과정에는 제한시간이 존재한다.\n제한시간을 두고 회의가 루즈해지는 것을 막아야만한다!!\n\n### 서비스의 목적과 가치\n\n![](.index_images/959281a8.png)\n\n서비스의 목적과 가치에 대해 구상한다.\n\n이 단계에서는 `서비스가 어떤 기능을 제공함으로서 어떤 문제를 해결한다`를 이야기하며 각자가 추상적인 목표를 어떤 방향으로 구체화하고 있는지 공유한다.\n\n> ⏰ 제한시간 : 3분\n\n### 서비스의 대상\n\n![](.index_images/db53c739.png)\n\n어떤 사용자가 이 서비스를 사용할 지 떠올리고 각자의 생각을 작성한다.\n\n이후 각자가 자신의 생각을 이야기하는 시간을 가진다.\n\n> ⏰ 제한시간 : 3분\n\n\n### 어떻게 하면 ~문제를 해결할 수 있을까?\n\n![](.index_images/1c560fdf.png)\n\n어떻게 하면 ~ 문제를 해결할 수 있을까? 라는 질문들을 작성하고 이야기한다.\n\n이 과정을 통해 해결해야할 문제들을 인지할 수 있다.\n\n이 때 기술적인 질문이 나오지 않도록 경계해야한다.\n해당 과정을 수행하는 이유는 서비스의 목적을 구체화하기 위함이다.\n\n- 어떻게 하면 제 시간에 식물에 물을 줄 수 있을까? (O)\n- 어떻게 하면 무중단 배포를 할 수 있을까? (X)\n\n> ⏰ 제한시간 : 5 ~ 8분\n\n### 워드 클라우드\n\n![](.index_images/07da0c75.png)\n\n위 단계에서 나온 키워드들을 기준으로 단어들을 나열한다.\n중요하게 생각되는 단어들은 크고 굵게 표기한다.\n\n이 과정을 통해 키워드를 간략하게 추릴 수 있다.\n\n> ⏰ 제한시간 : X\n\n### (선택) 모바일 vs 데스크탑\n\n![](.index_images/8f5a28d2.png)\n\n생각하는 서비스가 어떤 환경에서 운영될지 생각해본다.\n\n이 과정을 통해 서비스가 어떻게 그려질지 대략적으로 생각해볼 수 있다.\n\n> ⏰ 제한시간 : 2분\n\n### 장치/요소/기능 브레인스토밍\n\n![](.index_images/2d693ea9.png)\n\n앞서 설정한 문제, 키워드 등을 참고하여 개발하고자 하는 서비스에 있을 것 같은 기능들을 브레인 스토밍 식으로 작성한다.\n\n이 과정을 통해 서비스에 존재할 수 있는 기능들을 파악할 수 있다.\n\n> ⏰ 제한시간 : 5 ~ 8분\n\n### 지도 만들기\n\n![](.index_images/2bb017bc.png)\n\n앞서 정의한 서비스 대상을 참고하여 구체적인 페르소나를 지정한다.\n페르소나를 참고하여 어떤 페이지들이 존재할지 생각해본다.\n\n위(`장치/요소/기능 브레인스토밍`)에서 도출된 기능들을 기반으로 각 페이지에 기능들을 작성한다.\n\n이 과정을 통해 대략적인 서비스 흐름과 구성을 생각해 볼 수 있다.\n\n> ⏰ 제한시간 : X\n\n### 페이지 그려보기\n\n![](.index_images/efe27f26.png)\n\n위 `지도 만들기` 활동에서 도출된 페이지들을 직접 그려보는 시간을 가진다.\n팀원들 각자가 페이지가 어떻게 구성될지 대략적으로 그려본다.\n\n잘 그릴 필요는 없다. 연필로 어떤 버튼이 어디에 위치할지, 어떤 기능이 존재하는지 정도만 알아볼 수 있을정도로 가볍게 스케치해도 좋다.\n\n이 과정을 통해 각자가 생각하는 View를 공유하면서 서비스의 구현 방향성에 대한 싱크를 맞춰갈 수 있다.\n\n> ⏰ 제한시간 : 각 페이지별 5분\n\n### 결정권자 정하기 & 페이지 정하기\n\n![](.index_images/9f853c4e.png)\n\n위 과정에서 작성한 페이지 중 하나의 페이지를 결정하기 위해 결정권자를 정한다.\n\n결정권자는 팀원들의 투표로 정하고 페이지를 결정할 때 만큼은 결정권자의 권한이 가장 높은 수직적인 구조로 진행된다.\n즉, 다시말해 페이지는 결정권자의 선택으로 정해진다.\n\n결정권자를 뽑았다면 각 페이지를 정하는 시간을 가진다.\n\n이 때 결정권자가 아닌 다른 팀원들은 자신의 페이지 혹은 자신이 마음에 드는 페이지에 대해 결정권자를 설득한다.\n\n페이지를 결정 할 때 여러 페이지의 기능을 합칠 수도 있다.\n\n> ⏰ 제한시간 : 각 페이지별 5분 \n> 결정된 페이지들은 명예의전당👑 에 복사하여 올려둔다.\n> ![](.index_images/e4e8a0fb.png)\n\n\n### BDD\n\nBDD(Behavior Driven Development, 행위 주도 개발) 방법론을 차용한 방식으로 given - when - then 절로 해당 페이지에서 일어날 수 있는 모든 이벤트에 대해 정의한다.\n\n이 과정을 통해 구체적인 기능 명세를 할 수 있다.\n\n![](.index_images/faa7372e.png)\n\n해당 방식은 UI 기반의 기능 명세에 치중할 수 있기 때문에 API 설계가 요구된다면 API 명세를 하는것을 추천한다.\n\n> ⏰ 제한시간 : X\n\n## 결론\n\n구글 스프린트를 기반으로 피움 팀이 아이디어를 구체화하는 과정을 정리해봤다.\n\n아이디어 도출 과정에 정답은 없지만 스프린트를 처음 해본 입장에서는 참고하면 좋은 방법이라고 생각되어 기록으로 남겨봤다.\n\n## Reference\n\n[구글스프린트](https://brunch.co.kr/@brunchjwshim/90)\n[테오의 스프린트](https://velog.io/@teo/google-sprint-14)\n[Atlassian Sprint](https://www.atlassian.com/ko/agile/scrum/sprints)\nhttps://www.thesprintbook.com/the-design-sprint"}]}},"pageContext":{}},"staticQueryHashes":[],"slicesMap":{}}