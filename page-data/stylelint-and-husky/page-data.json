{"componentChunkName":"component---src-templates-post-jsx","path":"/stylelint-and-husky/","result":{"data":{"site":{"siteMetadata":{"title":"pium.log"}},"markdownRemark":{"id":"66383c86-e2c8-533a-90e0-2effae572742","excerpt":"이 글은 우테코 피움팀 크루 '클린'가 작성했습니다. style-lint, husky를 통한 컨벤션 자동화 하기 프로젝트는 혼자 할 수 도 있지만 팀원들과 함께 진행하는 경우도 있습니다. 피움의 경우에 팀원들과 함께 진행하고 있습니다. 개인적으로 생각했을 때 코드를 작성한다는 것은 그 자체로 하나의 문서를 만드는 것이라고 생각합니다. 그리고 그 문서의 양…","html":"<blockquote>\n<p>이 글은 우테코 피움팀 크루 '<a href=\"https://github.com/hozzijeong\">클린</a>'가 작성했습니다.</p>\n</blockquote>\n<h1>style-lint, husky를 통한 컨벤션 자동화 하기</h1>\n<p>프로젝트는 혼자 할 수 도 있지만 팀원들과 함께 진행하는 경우도 있습니다. 피움의 경우에 팀원들과 함께 진행하고 있습니다. 개인적으로 생각했을 때 코드를 작성한다는 것은 그 자체로 하나의 문서를 만드는 것이라고 생각합니다. 그리고 그 문서의 양식을 통일하는 것이 가독성이나 유지 보수를 수월하게 한다고 생각합니다. 그렇기에 각각의 팀바다 코드 컨벤션이 존재하고, 그 컨벤션을 강제하도록 하는 플러그인 (<code class=\"language-text\">eslint</code>, <code class=\"language-text\">prettier</code>)이 존재합니다. </p>\n<p>이번에 소개할 기능은 css컨벤션을 맞출 수 있게 도와주는 style-lint와 git 메세지 양식을 지정해주는 husky에 대해 소개해 보려 합니다. </p>\n<h3>Stylelint</h3>\n<p><a href=\"https://stylelint.io/\">링크</a></p>\n<blockquote>\n<p>A mighty CSS linter that helps you avoid errors and enforce conventions.</p>\n</blockquote>\n<p>stylelint의 소개글 입니다. 간단하게 말해서 css 에러를 피하고 컨벤션을 강요하도록 하는 기능입니다. 설치는 다음과 같습니다. 저희는 styled-component를 사용하기 때문에 해당 요건에 맞는 라이브러리를 설치하겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> --save-dev stylelint stylelint-config-styled-components</code></pre></div>\n<p>라이브러리 설치가 끝나면 <code class=\"language-text\">.stylelintic</code>이라는 파일에서 원하는 css규칙을 결정할 수 있습니다. </p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"extends\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"stylelint-config-clean-order\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"stylelint-config-styled-components\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"plugins\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"stylelint-order\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"customSyntax\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"postcss-styled-syntax\"</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>피움에서는 <code class=\"language-text\">stlyelint-order</code>라는 플러그인을 설치한 뒤에 해당 규칙에 따라 css 컨벤션을 정했습니다. 실행시키는 방법은 다음과 같습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token property\">\"stylelint\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"stylelint --ignore-path .gitignore '**/*.(ts|tsx)'\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>위와같이 설정하고 명령어를 입력하게 된다면 css파일을 돌면서 규칙에 맞지 않는 파일을 찾아줍니다. </p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> run stylelint</code></pre></div>\n<p><img src=\"https://github.com/pium-official/pium-official.github.io/assets/50974359/ddb7ccf7-48ac-498f-a01b-199966021c93\" alt=\"image\"></p>\n<p>하지만 우린 좀 더 편한걸 원합니다. 매번 실행시키고 경고창들을 변경하기 보다 실행시킬때마다 자동으로 수정시켜주는걸 원합니다. 만약 그것을 원한다면 명령어에 <code class=\"language-text\">—fix</code>만을 추가해주면 됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token property\">\"stylelint\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"stylelint --ignore-path .gitignore '**/*.(ts|tsx)' --fix\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><a href=\"https://github.com/pium-official/pium-official.github.io/assets/50974359/0f9aa05c-a861-4601-a959-58754752294d\">https://github.com/pium-official/pium-official.github.io/assets/50974359/0f9aa05c-a861-4601-a959-58754752294d</a></p>\n<p>여기에 더 가서 파일을 저장할 때마다 실행시킬수도 있습니다.</p>\n<p>vsc의 <code class=\"language-text\">setting.json</code>에 들어가서 stylelint에 대한 설정을 해주면 됩니다. (vsCode extension을 먼저 설치해야 합니다)</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token comment\">//...</span>\n\t<span class=\"token property\">\"editor.codeActionsOnSave\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token property\">\"source.fixAll.stylelint\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token property\">\"source.fixAll.eslint\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token property\">\"source.fixAll.prettier\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token property\">\"stylelint.validate\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n\t\t<span class=\"token string\">\"typescript\"</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token string\">\"typescriptreact\"</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token string\">\"css\"</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token string\">\"less\"</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token string\">\"postcss\"</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token string\">\"scss\"</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token string\">\"html\"</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token string\">\"javascript\"</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token string\">\"vue-html\"</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token string\">\"vue-postcss\"</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token string\">\"sass\"</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token string\">\"markdown\"</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token string\">\"vue\"</span>\n\t<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token comment\">//...</span></code></pre></div>\n<p>codeActionOnSave는 저장할때마다 stylelint에 있는 모든 것을 fix한다는 것이고 아래에 있는 stylelint.validate는 해당 옵션을 적용시킬 확장자를 의미합니다. 위와 같이 설정하고 저장한다면 저장을 할 때마다 자동으로 컨벤션 적용이 되는 것을 볼 수 있습니다.</p>\n<h3>Husky</h3>\n<p><a href=\"https://typicode.github.io/husky/\">링크</a></p>\n<blockquote>\n<p>Husky improves your commits and more 🐶 <em>woof!</em></p>\n<p>You can use it to <strong>lint your commit messages</strong>, <strong>run tests</strong>, <strong>lint code</strong>, etc... when you commit or push. Husky supports <strong><a href=\"https://git-scm.com/docs/githooks\">all Git hooks</a></strong>.</p>\n</blockquote>\n<p>이번에는 <code class=\"language-text\">git</code>에 대한 컨벤션을 맞추기 위해 <code class=\"language-text\">husky</code>라는 라이브러리를 통해 <code class=\"language-text\">git hook</code>을 실행하보려 합니다. <code class=\"language-text\">git</code>에는 <code class=\"language-text\">commit</code>, <code class=\"language-text\">push</code> 등의 명령어가 있지만, 각각의 명령어가 실행되기 전에 전반적으로 실행시키고 싶은 명령어가 있거나, 컨벤션을 맞추거나, <code class=\"language-text\">commit</code> 메세지 형식을 강제할 수 있습니다. 이러한 일련의 과정이 필요한 이유는 팀 컨벤션에 맞춰진 <strong>신뢰성 있는 코드</strong>를 원격 저장소에 저장하기 위해서 입니다. 예시로 앞서 얘기한 <code class=\"language-text\">stylelint</code>가 적용이 되지 않은 코드가 원격 저장소에 올라가게 된다면, 컨벤션이 맞춰지지 않은것이고 공통된 문서로써의 역할을 잃을 수 있습니다. 이에 각각의 명령어기 실행되기 전에 단계를 <code class=\"language-text\">pre</code>라는 접두사를 붙여서 <code class=\"language-text\">pre-commit</code> 또는 <code class=\"language-text\">pre-push</code>단계라고 하는데, 이 각각의 단계에서 <code class=\"language-text\">test</code>를 실행하거나 build<code class=\"language-text\">를</code> 실행할 수도 있습니다.</p>\n<p>다음 명령어를 통해 설치할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> husky --save-dev\nnpx husky <span class=\"token function\">install</span> // 이 명령어를 통해서 <span class=\"token function\">git</span> hook을 사용할 수 있도록 함.</code></pre></div>\n<p><code class=\"language-text\">hooks</code>를 만들기 위해서는 다음과 같이 입력하면 됩니다. <code class=\"language-text\">husky add &lt;file> [cmd]</code> → 이와 같은 형식으로 <code class=\"language-text\">husky</code> 폴더를 생성할 수 있습니다. (단, 해당 명령어를 입력하기 전에 <code class=\"language-text\">husky install</code>을 꼭 해야합니다!)</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">npx husky <span class=\"token function\">add</span> .husky/pre-commit <span class=\"token string\">\"npm test\"</span></code></pre></div>\n<p>위와같이 설정하고 나면 .husky폴더에 다음과 같은 파일이 생성됩니다.</p>\n<p><img src=\"https://github.com/pium-official/pium-official.github.io/assets/50974359/82a9d271-4748-4871-be3a-220ca36c2de0\" alt=\"image\"></p>\n<p>이제 모든 커밋을 하기 전에 <code class=\"language-text\">npm test</code>명령어가 실행되게 됩니다. 이제, <code class=\"language-text\">test</code>를 통과하지 못한다면 <code class=\"language-text\">commit</code>은 일어나지 않습니다. 이를 통해 원격 저장소에 올라가는 코드들의 신뢰성은 급상승 하게 됩니다! </p>\n<p>하지만 하나의 단점이 있습니다. 피움 프로젝트를 모노레포 형식으로 진행하고 있는데, <code class=\"language-text\">husky</code>가 <code class=\"language-text\">githook</code>이기 때문에 <code class=\"language-text\">npm</code>에 의존성이 없는 <code class=\"language-text\">backend</code> 폴더에서도 커밋이 발생하기 전에 해당 <code class=\"language-text\">npm test</code>가 실행된다는 점입니다. 이는 상당히 좋지 못합니다… <code class=\"language-text\">pre-commit</code> 단계에서 명령어를 <code class=\"language-text\">cd frontend &amp;&amp; npm test</code>와 같이 변경해서 실행해봐도 백엔드에서 커밋을 할때마다 해당 명령어가 실행된다는게 상당히 비효율적인 방식이라고 생각했습니다. 따라서 피움 프론트엔드 CI는 husky로 진행하지 않기로 했습니다. 단, <code class=\"language-text\">commit</code> 메세지 형태는 강제할 수 있었습니다. <code class=\"language-text\">git</code> 컨벤션인 부분이라 FE/BE 모두 공통으로 해당되는 내용이었기에 해당 부분만 추가하는 방식으로 <code class=\"language-text\">husky</code>를 사용하기로 했습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token shebang important\">#!/usr/bin/env sh</span>\n<span class=\"token builtin class-name\">.</span> <span class=\"token string\">\"<span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">dirname</span> -- <span class=\"token string\">\"<span class=\"token variable\">$0</span>\"</span><span class=\"token variable\">)</span></span>/_/husky.sh\"</span>\n\n<span class=\"token comment\"># 커밋 컨벤션</span>\n<span class=\"token comment\"># 0. 검사 예외 조건 (자동 생성, 최초 커밋)</span>\n<span class=\"token comment\"># - Merge branch*, Merge pull request*, initial*</span>\n<span class=\"token comment\"># 1. 접두사의 글자는 소문자</span>\n<span class=\"token comment\"># 2. 맨 마지막 글자 '.' 마침표 금지</span>\n<span class=\"token comment\"># 3. 커밋 접두사 (규칙: '접두사' + '콜론' + ' ')</span>\n<span class=\"token comment\"># - feat: 새로운 기능 추가</span>\n<span class=\"token comment\"># - fix: 버그 수정</span>\n<span class=\"token comment\"># - docs: 문서의 수정</span>\n<span class=\"token comment\"># - style: (코드의 수정 없이) 스타일(style)만 변경(들여쓰기 같은 포맷이나 세미콜론을 빼먹은 경우)</span>\n<span class=\"token comment\"># - refactor: 코드를 리펙토링</span>\n<span class=\"token comment\"># - test: Test 관련한 코드의 추가, 수정</span>\n<span class=\"token comment\"># - chore: (코드의 수정 없이) 설정을 변경</span>\n<span class=\"token comment\"># - design: css 코드 수정</span>\n<span class=\"token comment\"># - build: build 및 관련 설정 변경</span>\n\n<span class=\"token assign-left variable\">COMMIT_MSG_FILE</span><span class=\"token operator\">=</span><span class=\"token variable\">$1</span>\n<span class=\"token assign-left variable\">FIRST_LINE</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">`</span><span class=\"token function\">head</span> <span class=\"token parameter variable\">-n1</span> $<span class=\"token punctuation\">{</span>COMMIT_MSG_FILE<span class=\"token punctuation\">}</span><span class=\"token variable\">`</span></span>\n<span class=\"token assign-left variable\">RES</span><span class=\"token operator\">=</span><span class=\"token string\">\"needCheck\"</span> <span class=\"token comment\"># needCheck, auto, initial, lintError*, clear</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span> <span class=\"token variable\">$FIRST_LINE</span> <span class=\"token operator\">=~</span> ^<span class=\"token punctuation\">(</span>Merge branch<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">||</span>\n   <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span> <span class=\"token variable\">$FIRST_LINE</span> <span class=\"token operator\">=~</span> ^<span class=\"token punctuation\">(</span>Merge pull request<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span>\n  <span class=\"token assign-left variable\">RES</span><span class=\"token operator\">=</span><span class=\"token string\">\"auto\"</span>\n<span class=\"token keyword\">fi</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span> <span class=\"token variable\">$FIRST_LINE</span> <span class=\"token operator\">=~</span> ^<span class=\"token punctuation\">(</span>initial<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span>\n  <span class=\"token assign-left variable\">RES</span><span class=\"token operator\">=</span><span class=\"token string\">\"initial\"</span>\n<span class=\"token keyword\">fi</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span> <span class=\"token variable\">$RES</span> <span class=\"token operator\">==</span> <span class=\"token string\">\"needCheck\"</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span> <span class=\"token variable\">$FIRST_LINE</span> <span class=\"token operator\">=~</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">\\</span>.<span class=\"token punctuation\">)</span>$ <span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span>\n    <span class=\"token assign-left variable\">RES</span><span class=\"token operator\">=</span><span class=\"token string\">\"lintError1\"</span>\n  <span class=\"token keyword\">fi</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span> <span class=\"token operator\">!</span> <span class=\"token variable\">$FIRST_LINE</span> <span class=\"token operator\">=~</span> ^<span class=\"token punctuation\">(</span>feat: <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;&amp;</span>\n     <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span> <span class=\"token operator\">!</span> <span class=\"token variable\">$FIRST_LINE</span> <span class=\"token operator\">=~</span> ^<span class=\"token punctuation\">(</span>fix: <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;&amp;</span>\n     <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span> <span class=\"token operator\">!</span> <span class=\"token variable\">$FIRST_LINE</span> <span class=\"token operator\">=~</span> ^<span class=\"token punctuation\">(</span>docs: <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;&amp;</span>\n     <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span> <span class=\"token operator\">!</span> <span class=\"token variable\">$FIRST_LINE</span> <span class=\"token operator\">=~</span> ^<span class=\"token punctuation\">(</span>style: <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;&amp;</span>\n     <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span> <span class=\"token operator\">!</span> <span class=\"token variable\">$FIRST_LINE</span> <span class=\"token operator\">=~</span> ^<span class=\"token punctuation\">(</span>refactor: <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;&amp;</span>\n     <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span> <span class=\"token operator\">!</span> <span class=\"token variable\">$FIRST_LINE</span> <span class=\"token operator\">=~</span> ^<span class=\"token punctuation\">(</span>test: <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;&amp;</span>\n     <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span> <span class=\"token operator\">!</span> <span class=\"token variable\">$FIRST_LINE</span> <span class=\"token operator\">=~</span> ^<span class=\"token punctuation\">(</span>design: <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;&amp;</span>\n     <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span> <span class=\"token operator\">!</span> <span class=\"token variable\">$FIRST_LINE</span> <span class=\"token operator\">=~</span> ^<span class=\"token punctuation\">(</span>build: <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;&amp;</span>\n     <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span> <span class=\"token operator\">!</span> <span class=\"token variable\">$FIRST_LINE</span> <span class=\"token operator\">=~</span> ^<span class=\"token punctuation\">(</span>chore: <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span>\n    <span class=\"token assign-left variable\">RES</span><span class=\"token operator\">=</span><span class=\"token string\">\"lintError2\"</span>\n  <span class=\"token keyword\">fi</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span> <span class=\"token operator\">!</span> <span class=\"token variable\">$RES</span> <span class=\"token operator\">=~</span> ^<span class=\"token punctuation\">(</span>lintError<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span>\n    <span class=\"token assign-left variable\">RES</span><span class=\"token operator\">=</span><span class=\"token string\">\"clear\"</span>\n  <span class=\"token keyword\">fi</span>\n<span class=\"token keyword\">fi</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span> <span class=\"token variable\">$RES</span> <span class=\"token operator\">=~</span> ^<span class=\"token punctuation\">(</span>lintError<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span> <span class=\"token variable\">$RES</span> <span class=\"token operator\">==</span> <span class=\"token string\">\"lintError1\"</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span>\n    <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"CommitLint#1: 문장 마지막의 ('.') 마침표를 제거해주세요.\"</span>\n  <span class=\"token keyword\">fi</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span> <span class=\"token variable\">$RES</span> <span class=\"token operator\">==</span> <span class=\"token string\">\"lintError2\"</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span>\n    <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"CommitLint#2: 접두사, 콜론, 띄어쓰기 형태를 확인하세요. (feat: , fix: , docs: , style: , refactor: , test: , chore: )\"</span>\n  <span class=\"token keyword\">fi</span>\n  <span class=\"token builtin class-name\">exit</span> <span class=\"token number\">1</span>\n<span class=\"token keyword\">elif</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span> <span class=\"token variable\">$RES</span> <span class=\"token operator\">==</span> <span class=\"token string\">\"auto\"</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span>\n  <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"Automatically generated commit message from git\"</span>\n<span class=\"token keyword\">elif</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span> <span class=\"token variable\">$RES</span> <span class=\"token operator\">==</span> <span class=\"token string\">\"initial\"</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span>\n  <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"Initial commit\"</span>\n<span class=\"token keyword\">elif</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span> <span class=\"token variable\">$RES</span> <span class=\"token operator\">==</span> <span class=\"token string\">\"clear\"</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span>\n  <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"Pass commit lint!\"</span>\n<span class=\"token keyword\">fi</span>\n\n<span class=\"token builtin class-name\">exit</span> <span class=\"token number\">0</span></code></pre></div>\n<p>프로젝트 <code class=\"language-text\">git</code> 컨벤션에 맞춰서 메세지 작성을 강제 했고, 이를 통해 <code class=\"language-text\">commit</code> 메세지 통일을 할 수 있었습니다!</p>\n<hr>\n<h3>맺는말</h3>\n<p>프로젝트는 팀원들이 하나의 문서를 만드는 것이라고 생각을 합니다. 그리고 통일된 문서를 만들때 가장 필요한 것은 규칙(컨벤션)이고 그 규칙을 자동으로 강제할 수 있고, 코드의 신뢰성을 높여줄 수 있는 라이브러리에 대해서 한번 알아봤습니다.\n스타일 컨벤션을 맞추기 위해서는 <code class=\"language-text\">stylelint</code>를 <code class=\"language-text\">git hook</code>을 통해 <code class=\"language-text\">git</code>컨벤션을 맞추고 싶은 경우에는 <code class=\"language-text\">husky</code>를 통해서 컨벤션을 통일 할 수 있었습니다.</p>","frontmatter":{"title":"stylelint와 husky를 통해 컨벤션 통일하기","date":"August 07, 2023","update":"August 07, 2023","tags":["stylelint","husky","컨벤션"],"series":null},"fields":{"slug":"/stylelint-and-husky/","readingTime":{"minutes":11.01}}},"seriesList":{"edges":[{"node":{"id":"28f1d87e-d3fc-5567-8531-57649652864f","fields":{"slug":"/sprint-idea/"},"frontmatter":{"title":"구글 스프린트 기반 아이디어 도출"}}},{"node":{"id":"4a9246fb-171b-5973-88fc-864034e78afd","fields":{"slug":"/blog-starter/"},"frontmatter":{"title":"피움 블로그 생성과정"}}},{"node":{"id":"c826ce0e-1ea7-517c-8d19-84e90a59a798","fields":{"slug":"/jenkins-setting/"},"frontmatter":{"title":"젠킨스 설치하기"}}},{"node":{"id":"a387bf4f-567f-50e7-b6a7-99a1a1c8971b","fields":{"slug":"/jpa-notnull-nullable/"},"frontmatter":{"title":"@NotNull과 nullable = false는 어떤 차이가 있을까?"}}},{"node":{"id":"a78e224b-b711-5071-8e90-013d6f4bebc3","fields":{"slug":"/pium-deploy-step/"},"frontmatter":{"title":"피움의 배포과정"}}},{"node":{"id":"ce07fbab-1ed5-5f1e-8e2f-eb430879b56a","fields":{"slug":"/fe-tanstack-query/"},"frontmatter":{"title":"프론트엔드: Tanstack Query 사용에 대하여"}}},{"node":{"id":"159c943b-1a50-57dd-aa71-7557364752a5","fields":{"slug":"/ci-cd-setting/"},"frontmatter":{"title":"Jenkins와 Github Webhook을 이용해 CI/CD 구축하기"}}},{"node":{"id":"dea45a4a-bfde-5fbb-8a97-42d3a3e77a0b","fields":{"slug":"/jenkins-hook-by-label/"},"frontmatter":{"title":"PR 라벨로 젠킨스 빌드유발을 구분하기"}}},{"node":{"id":"1a03734e-d413-553f-9152-1dad2fc4acca","fields":{"slug":"/apply-https/"},"frontmatter":{"title":"내 서버에 HTTPS 설정하기"}}},{"node":{"id":"cecbc8b9-db00-562b-aa0b-06c406cfc44a","fields":{"slug":"/bundle-analyze/"},"frontmatter":{"title":"bundle-analyze를 통한 bundle 크기 분석"}}},{"node":{"id":"707f8ffb-1409-5c27-b15a-5661b235c226","fields":{"slug":"/db-drop-stop/"},"frontmatter":{"title":"Table Drop 못하게 막아버리기"}}},{"node":{"id":"fe4b591a-4dd5-5dd2-b18a-b318afd1e9e3","fields":{"slug":"/transactional-not-in-restassured/"},"frontmatter":{"title":"[트러블슈팅] @SpringbootTest의 RANDOM_PORT 환경에서 @Transactional 어노테이션을 사용했을 때, RestAssured GET 요청이 수행되지 않는 경우(트랜잭션 격리 이해하기)"}}},{"node":{"id":"80aa708e-ef8a-5c79-9644-cb8c04d55a63","fields":{"slug":"/acceptance-test-resolve/"},"frontmatter":{"title":"인수테스트 데이터 초기화하기"}}},{"node":{"id":"15def1d5-c20f-5d07-b46e-24a14661365f","fields":{"slug":"/react-setting-without-cra/"},"frontmatter":{"title":"webpack으로만 React 설정하기 (without CRA)"}}},{"node":{"id":"66383c86-e2c8-533a-90e0-2effae572742","fields":{"slug":"/stylelint-and-husky/"},"frontmatter":{"title":"stylelint와 husky를 통해 컨벤션 통일하기"}}},{"node":{"id":"ed5951d5-beda-5a8f-adb2-07c2fcb38d5e","fields":{"slug":"/OAuth2.0/"},"frontmatter":{"title":"내가 이해한 OAuth2.0"}}},{"node":{"id":"45eeb9a3-557d-5704-8fd9-925283e1e27b","fields":{"slug":"/restdocs-start/"},"frontmatter":{"title":"RestDocs로 API 문서화하기"}}},{"node":{"id":"663b560a-734d-51a9-a6dc-3c4f50716c74","fields":{"slug":"/spring-event-apply/"},"frontmatter":{"title":"Spring Event 적용하기"}}},{"node":{"id":"55ae8038-3f65-5a59-8db3-c7405e7fc125","fields":{"slug":"/github-actions-cypress/"},"frontmatter":{"title":"피움 Cypress 자동화 구축기"}}},{"node":{"id":"503e9e71-eda3-53d7-8142-7c309faf213e","fields":{"slug":"/why_we_applied_querydsl/"},"frontmatter":{"title":"피움 서비스의 Querydsl 도입 이유"}}},{"node":{"id":"709124d0-5b05-5530-804d-e90ec9856a13","fields":{"slug":"/querydsl_apply_procedure/"},"frontmatter":{"title":"피움 서비스의 Querydsl 적용 과정"}}},{"node":{"id":"5c865dcb-cefd-58be-8968-b5edf6c8080c","fields":{"slug":"/server-logging/"},"frontmatter":{"title":"Logback을 이용해 운영 환경 별 로그 남기기"}}},{"node":{"id":"8269f166-d041-533c-9d44-332d8d8c3dca","fields":{"slug":"/server-monitoring/"},"frontmatter":{"title":"CloudWatch를 이용한 모니터링 환경 구성"}}},{"node":{"id":"0faec7ad-3bd1-5f5e-9222-115f771df8ed","fields":{"slug":"/tanstack-query-cache-trouble-shooting/"},"frontmatter":{"title":"InfinityQuery에서 fetch가 제대로 이루어지지 않는다?!?!"}}},{"node":{"id":"c77f7199-7fc6-53a3-a1fb-0792e05655a7","fields":{"slug":"/OAuth2.0-backend/"},"frontmatter":{"title":"OAuth 2.0 로그인 구현하기 (카카오)"}}},{"node":{"id":"12e4480d-386b-5d0e-bd69-4209fed36066","fields":{"slug":"/OAuth-test-backend/"},"frontmatter":{"title":"외부 API 를 의존하는 OAuth 로그인 테스트하기"}}},{"node":{"id":"ff40e109-cc92-5d83-a213-ca9d07136d95","fields":{"slug":"/aws-s3-apply/"},"frontmatter":{"title":"AWS S3로 정적 이미지 배포하기"}}},{"node":{"id":"e343af80-72dd-5173-bbb5-5069a17d1200","fields":{"slug":"/search_in_spring_data_jpa/"},"frontmatter":{"title":"Spring Data Jpa를 활용한 검색 기능 개발하기"}}},{"node":{"id":"af344dd8-ea77-5fde-9452-a97952ce60be","fields":{"slug":"/submodule-apply/"},"frontmatter":{"title":"Git submodule을 이용한 민감정보 관리"}}},{"node":{"id":"08c9daf0-2344-52a9-8c68-31ac04c24ff0","fields":{"slug":"/tomcat-thread-config/"},"frontmatter":{"title":"톰캣 스레드 설정하기"}}},{"node":{"id":"dbe47289-01f4-571d-9506-fbb92016f547","fields":{"slug":"/optimize-frontend/"},"frontmatter":{"title":"피움 최적화하기"}}},{"node":{"id":"eafed74f-ff11-5af1-a589-e9dd2ccb5c8e","fields":{"slug":"/http-cache/"},"frontmatter":{"title":"CloudFront와 HTTP 캐시"}}},{"node":{"id":"7b830fe6-e2df-564a-926e-7f7800380336","fields":{"slug":"/query-analysis/"},"frontmatter":{"title":"서비스 내에서 발생하는 쿼리를 분석하고 개선하기"}}},{"node":{"id":"37437d15-a63e-52ef-b031-6ee1bc6fa8bc","fields":{"slug":"/image-resize/"},"frontmatter":{"title":"서버에서 이미지 리사이징하기"}}},{"node":{"id":"216f4636-4125-5765-83d8-a6a610692a41","fields":{"slug":"/dont-stop-deploy/"},"frontmatter":{"title":"무중단 배포 환경 구성하기"}}}]},"previous":{"fields":{"slug":"/react-setting-without-cra/"},"frontmatter":{"title":"webpack으로만 React 설정하기 (without CRA)"}},"next":{"fields":{"slug":"/OAuth2.0/"},"frontmatter":{"title":"내가 이해한 OAuth2.0"}}},"pageContext":{"id":"66383c86-e2c8-533a-90e0-2effae572742","series":null,"previousPostId":"15def1d5-c20f-5d07-b46e-24a14661365f","nextPostId":"ed5951d5-beda-5a8f-adb2-07c2fcb38d5e"}},"staticQueryHashes":[],"slicesMap":{}}