{"componentChunkName":"component---src-templates-post-jsx","path":"/react-setting-without-cra/","result":{"data":{"site":{"siteMetadata":{"title":"pium.log"}},"markdownRemark":{"id":"15def1d5-c20f-5d07-b46e-24a14661365f","excerpt":"이 글은 우테코 피움팀 크루 '클린'가 작성했습니다. CRA없에 webpack으로 react 세팅하기 피움 서비스 환경을 만들기로 하면서, FE의 개발 스펙은 React + TypeScript로 설정하였습니다. React는 당연 현존 최강 라이브러리이고, 여기에 JavaScript의 동적 타입을 컴파일 단계에서 잡아주는 TypeScript까지 더해서 안정…","html":"<blockquote>\n<p>이 글은 우테코 피움팀 크루 '<a href=\"https://github.com/hozzijeong\">클린</a>'가 작성했습니다.</p>\n</blockquote>\n<h1>CRA없에 webpack으로 react 세팅하기</h1>\n<p>피움 서비스 환경을 만들기로 하면서, FE의 개발 스펙은 React + TypeScript로 설정하였습니다. React는 당연 현존 최강 라이브러리이고, 여기에 JavaScript의 동적 타입을 컴파일 단계에서 잡아주는 TypeScript까지 더해서 안정적인 서비스를 개발하려고 합니다. </p>\n<p>평소같았으면 <code class=\"language-text\">CRA</code>를 통해 손쉽게 리액트 설치를 하고 개발을 시작했을 텐데, CRA의 단점이 이미 정교하게 세팅된 babel과 webpack 설정을 따라 개발을 해야 한다는 것이고 그에 따른 트레이드 오프가 상당히 많이 발생할 수 있다는 점입니다. (하나의 예시로 CRA를 통해서는 절대경로 지정 하기가 어렵습니다.) 또한, 이왕에 내 서비스 개발하는거 남이 차려준 밥상 보다 내가 직접 한번 해보겠다는 생각으로 webpack으로만 react세팅을 시도해 보려고합니다 (가장 큰 원인은 요구사항이 CRA없이 webpack으로 react 설치하는 거였습니다 ㅎ)</p>\n<h3>package.json 설치</h3>\n<p>우선 가장 처음 해야할 단계입니다. react, typescript, webpack 등 우리가 설치할 의존성 관리와 기타 프로젝트 정보를 저장해 줄 <code class=\"language-text\">package.json</code>을 설치 해줍니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> init // 또는\n<span class=\"token function\">yarn</span> init <span class=\"token parameter variable\">-y</span></code></pre></div>\n<h3>환경 구축에 필요한 패키지 설치</h3>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> react react-dom // react 설치\n<span class=\"token function\">npm</span> <span class=\"token function\">install</span> <span class=\"token parameter variable\">-D</span> typescript @types/react @types/react-dom // typescript 설치\n<span class=\"token function\">npm</span> <span class=\"token function\">install</span> tsc-init // tsconfig 설치\n\n<span class=\"token function\">npm</span> <span class=\"token function\">install</span> <span class=\"token parameter variable\">-D</span> webpack webpack-cli // 웹팩 라이브러리와 명령어를 통해 웹팩을 이용할 수 있는 라이브러리 설치\n<span class=\"token function\">npm</span> <span class=\"token function\">install</span> <span class=\"token parameter variable\">-D</span> html-webpack-plugin webpack-dev-server ts-loader  // 각각 번들 후 html파일을 만들어주는 플러그인, 개발할 때 사용할 웹 서버, typescript파일을 javascript로 변환하는 webpack loader 설치</code></pre></div>\n<p>위에 파일들을 설치하고 나면 이제부터 본격적인 세팅을 합니다.</p>\n<h3>webpack.config.js 파일 설정</h3>\n<p>웹팩 파일 설정입니다. </p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// webpack.config.js</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> resolve <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'path'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// path 설정에 도움을 줍니다.</span>\n<span class=\"token keyword\">const</span> HtmlWebpackPlugin <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'html-webpack-plugin'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> ReactRefreshWebpackPlugin <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'@pmmmwh/react-refresh-webpack-plugin'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> ReactRefreshTypeScript <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'react-refresh-typescript'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> isDevelopment <span class=\"token operator\">=</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">NODE_ENV</span> <span class=\"token operator\">===</span> <span class=\"token string\">'development'</span><span class=\"token punctuation\">;</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">entry</span><span class=\"token operator\">:</span> <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'src'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'index.tsx'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> \n  <span class=\"token literal-property property\">output</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">path</span><span class=\"token operator\">:</span> <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'dist'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 번들 파일이 저장될 디렉토리</span>\n    <span class=\"token literal-property property\">filename</span><span class=\"token operator\">:</span> <span class=\"token string\">'bundle.js'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 파일 이름</span>\n    <span class=\"token literal-property property\">assetModuleFilename</span><span class=\"token operator\">:</span> <span class=\"token string\">'assets/[name][ext]'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 에셋의 파일 이름</span>\n    <span class=\"token literal-property property\">clean</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 빌드 이전 결과물 정리 옵션</span>\n    <span class=\"token literal-property property\">publicPath</span><span class=\"token operator\">:</span> <span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 빌드된 파일 앞에 붙일 경로</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">resolve</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">extensions</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'.ts'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'.tsx'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'...'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 파일 확장자. TS및 JSX확자자ㅡㄹ 설정했습니다.</span>\n    <span class=\"token literal-property property\">alias</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// 절대경로 설정</span>\n      <span class=\"token literal-property property\">types</span><span class=\"token operator\">:</span> <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'src'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'types'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">pages</span><span class=\"token operator\">:</span> <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'src'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'pages'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">components</span><span class=\"token operator\">:</span> <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'src'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'components'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">hooks</span><span class=\"token operator\">:</span> <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'src'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'hooks'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">apis</span><span class=\"token operator\">:</span> <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'src'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'apis'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">utils</span><span class=\"token operator\">:</span> <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'src'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'utils'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">assets</span><span class=\"token operator\">:</span> <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'src'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'assets'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">constants</span><span class=\"token operator\">:</span> <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'src'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'constants'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">contexts</span><span class=\"token operator\">:</span> <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'src'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'contexts'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">module</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// 로더 및 규칙 설정</span>\n    <span class=\"token literal-property property\">rules</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token punctuation\">{</span>\n        <span class=\"token literal-property property\">test</span><span class=\"token operator\">:</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">\\.tsx?$</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">i</span></span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// ts-loader를 사용했습니다. babel-loader를 사용하지 않은 이유는 IE까지 폴리필 지원을 하지 않아도 되기 때문입니ㅏㄷ.</span>\n        <span class=\"token literal-property property\">exclude</span><span class=\"token operator\">:</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">node_modules</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">loader</span><span class=\"token operator\">:</span> <span class=\"token string\">'ts-loader'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">options</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token function-variable function\">getCustomTransformers</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n            <span class=\"token literal-property property\">before</span><span class=\"token operator\">:</span> isDevelopment <span class=\"token operator\">?</span> <span class=\"token punctuation\">[</span><span class=\"token function\">ReactRefreshTypeScript</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n          <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n          <span class=\"token literal-property property\">transpileOnly</span><span class=\"token operator\">:</span> isDevelopment<span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">{</span>\n        <span class=\"token literal-property property\">test</span><span class=\"token operator\">:</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">\\.(png|jpg|jpeg|svg|woff|woff2|eot|ttf|otf)$</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">i</span></span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token string\">'asset/resource'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">plugins</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token keyword\">new</span> <span class=\"token class-name\">HtmlWebpackPlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token comment\">//빌드된 다음에 템플릿을 지정해줍니다.</span>\n      <span class=\"token literal-property property\">template</span><span class=\"token operator\">:</span> <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'public'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'index.html'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token operator\">...</span><span class=\"token punctuation\">(</span>isDevelopment <span class=\"token operator\">?</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">ReactRefreshWebpackPlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">devServer</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">open</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">port</span><span class=\"token operator\">:</span> <span class=\"token number\">8282</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 기본은 3000번이지만 커스텀 기념으로 바꿨씁니다.</span>\n    <span class=\"token keyword\">static</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">directory</span><span class=\"token operator\">:</span> <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'public'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">historyApiFallback</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"language-text\">entry</code>: 웹팩의 진입점을 의미. react에서는 src의 index.js에서 모든게 시작됩니다.</p>\n<p><code class=\"language-text\">output</code>: 번들된 파일의 출력 경로를 정의합니다.</p>\n<p><code class=\"language-text\">resolve</code>: 모듈 해석 옵션을 설정합니다.</p>\n<p><code class=\"language-text\">module</code>: 로더의 규칙을 설정합니다.</p>\n<ul>\n<li>보통은 .css,.scss파일 확장을 위해 <code class=\"language-text\">style-loader</code>를 사용하기도 하지만, 피움에서는 CSS-in-JS를 선택했기 때문에 해당 확장자들이 존재하지 않아서 따로 설정하지 않았습니다.</li>\n</ul>\n<p><code class=\"language-text\">plugins</code>:  웹팩 플러그인을 설정합니다. 플러그인은 빌드 과정을 확장하거나 수정하는데 사용됩니다.</p>\n<p><code class=\"language-text\">devServer</code>: 개발 서버 옵션(localhost)을 설정합니다. </p>\n<blockquote>\n<p><code class=\"language-text\">ReactRefreshWebpackPlugin</code>은 리액트에서 저장을 파일 저장을 할 때마다 상태 초기화를 막아주는 역할을 하는 플러그인 입니다. CRA에서는 기본적으로 제공되어 있는 기능이지만, custom기능에는 존재하지 않기에 추가해 줬습니다.</p>\n</blockquote>\n<h3>tsconfig파일 설정</h3>\n<p>tsconfig파일은 typescript의 버전과 모듈 등 컴파일 과정에서 어떤 버전으로 실행할 것인지 등을 설정하는 파일입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"compilerOptions\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// 컴파일러 옵션 설정</span>\n    <span class=\"token property\">\"target\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"ES2016\"</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 컴파일 하는 JS 버전을 ES2016으로 설정</span>\n    <span class=\"token property\">\"module\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"CommonJS\"</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 컴파일된 모듈 시스템 설정</span>\n    <span class=\"token property\">\"jsx\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"react-jsx\"</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// JSX문법을 어떻게 컴파일 할지 설정</span>\n\n    <span class=\"token property\">\"strict\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 엄격한 타입 체크</span>\n    <span class=\"token property\">\"exactOptionalPropertyTypes\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 선택적 프로퍼티 타입을 체크함</span>\n    <span class=\"token property\">\"skipLibCheck\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 라이브러리 파일의 타입 체크를 건너뜀</span>\n    <span class=\"token property\">\"esModuleInterop\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// CJS 및 ES 모듈을 함께 사용할 때 옵션을 설정 ES6 모듈 사양을 준수하여 CJS사용 가능하게 함. (즉 import 가능)</span>\n\n    <span class=\"token property\">\"baseUrl\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"src\"</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 루트가 되는 url</span>\n    <span class=\"token property\">\"paths\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// 절대 경로</span>\n      <span class=\"token property\">\"types/*\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"types/*\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"pages/*\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"pages/*\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"components/*\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"components/*\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"contexts/*\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"contexts/*\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"hooks/*\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"hooks/*\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"utils/*\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"utils/*\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"assets/*\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"assets/*\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"constants/*\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"constants/*\"</span><span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n    <span class=\"token property\">\"types\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"cypress\"</span><span class=\"token punctuation\">]</span> <span class=\"token comment\">// 타입 정의 파일 지정</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"include\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"src/**/*\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"cypress/**/*\"</span><span class=\"token punctuation\">]</span> <span class=\"token comment\">// 컴파일할 소스 코드 파일 정의</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>피움에서는 IE를 제외한 모든 브라우저를 타겟으로 설정하고 있기 때문에 최대한 낮은 버전의 <code class=\"language-text\">JavaScript</code>를 타겟으로 설정했습니다. ES2016을 설정하고 처음 코드를 작성하다가 <code class=\"language-text\">import</code>가 제대로 이루어지지 않는 것을 보고 문제를 찾다가 <code class=\"language-text\">esModuleInterop</code>옵션을 true로 설정해 줘야지 CJS에서도 import가 가능하다는 것을 알게 되었습니다. </p>\n<p>또한, 상대 경로가 아닌 절대경로 사용을 선택했는데, 이는 복잡한 파일 구조를 보기 쉽게 알아보기 위해 설정했습니다.</p>\n<blockquote>\n<p><code class=\"language-text\">esModuleInterop</code>설정은 target으로 하는 옵션이 node16이거나 nodenext인 경우에는 true로 되어있지만, 그게 아닌 경우에는 false이므로, import 구문을 사용하고 싶다면 옵션을 true로 하는것이 좋습니다.</p>\n</blockquote>\n<h3>package.json 설정</h3>\n<p>이제 설정한 웹팩과 tsconfig를 확인해 보기 위해서는 실행 스크립트를 알아야 합니다. 보통 자주 사용하는 명령어로는 <code class=\"language-text\">start</code>와 <code class=\"language-text\">build</code>가 있습니다. 그리고 나머지 명령어는 스토리북이나 cypress에 대한 명령어들입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span> <span class=\"token comment\">//package.json</span>\n<span class=\"token comment\">//...</span>\n\t<span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"pium-frontend\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"version\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"1.0.0\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"description\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"피움 프론트엔드\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"main\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"src/index.tsx\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"test\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"echo test is not prepared\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"start\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"webpack-dev-server --mode=development\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"build\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"NODE_ENV=production webpack\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"storybook\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"storybook dev -p 6006\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"build-storybook\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"storybook build -o ./dist/storybook\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"cypress\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"cypress open\"</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token comment\">//...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","frontmatter":{"title":"webpack으로만 React 설정하기 (without CRA)","date":"August 06, 2023","update":"August 06, 2023","tags":["React","Webpack"],"series":null},"fields":{"slug":"/react-setting-without-cra/","readingTime":{"minutes":8.85}}},"seriesList":{"edges":[{"node":{"id":"28f1d87e-d3fc-5567-8531-57649652864f","fields":{"slug":"/sprint-idea/"},"frontmatter":{"title":"구글 스프린트 기반 아이디어 도출"}}},{"node":{"id":"4a9246fb-171b-5973-88fc-864034e78afd","fields":{"slug":"/blog-starter/"},"frontmatter":{"title":"피움 블로그 생성과정"}}},{"node":{"id":"c826ce0e-1ea7-517c-8d19-84e90a59a798","fields":{"slug":"/jenkins-setting/"},"frontmatter":{"title":"젠킨스 설치하기"}}},{"node":{"id":"a387bf4f-567f-50e7-b6a7-99a1a1c8971b","fields":{"slug":"/jpa-notnull-nullable/"},"frontmatter":{"title":"@NotNull과 nullable = false는 어떤 차이가 있을까?"}}},{"node":{"id":"a78e224b-b711-5071-8e90-013d6f4bebc3","fields":{"slug":"/pium-deploy-step/"},"frontmatter":{"title":"피움의 배포과정"}}},{"node":{"id":"ce07fbab-1ed5-5f1e-8e2f-eb430879b56a","fields":{"slug":"/fe-tanstack-query/"},"frontmatter":{"title":"프론트엔드: Tanstack Query 사용에 대하여"}}},{"node":{"id":"159c943b-1a50-57dd-aa71-7557364752a5","fields":{"slug":"/ci-cd-setting/"},"frontmatter":{"title":"Jenkins와 Github Webhook을 이용해 CI/CD 구축하기"}}},{"node":{"id":"dea45a4a-bfde-5fbb-8a97-42d3a3e77a0b","fields":{"slug":"/jenkins-hook-by-label/"},"frontmatter":{"title":"PR 라벨로 젠킨스 빌드유발을 구분하기"}}},{"node":{"id":"1a03734e-d413-553f-9152-1dad2fc4acca","fields":{"slug":"/apply-https/"},"frontmatter":{"title":"내 서버에 HTTPS 설정하기"}}},{"node":{"id":"cecbc8b9-db00-562b-aa0b-06c406cfc44a","fields":{"slug":"/bundle-analyze/"},"frontmatter":{"title":"bundle-analyze를 통한 bundle 크기 분석"}}},{"node":{"id":"707f8ffb-1409-5c27-b15a-5661b235c226","fields":{"slug":"/db-drop-stop/"},"frontmatter":{"title":"Table Drop 못하게 막아버리기"}}},{"node":{"id":"fe4b591a-4dd5-5dd2-b18a-b318afd1e9e3","fields":{"slug":"/transactional-not-in-restassured/"},"frontmatter":{"title":"[트러블슈팅] @SpringbootTest의 RANDOM_PORT 환경에서 @Transactional 어노테이션을 사용했을 때, RestAssured GET 요청이 수행되지 않는 경우(트랜잭션 격리 이해하기)"}}},{"node":{"id":"80aa708e-ef8a-5c79-9644-cb8c04d55a63","fields":{"slug":"/acceptance-test-resolve/"},"frontmatter":{"title":"인수테스트 데이터 초기화하기"}}},{"node":{"id":"15def1d5-c20f-5d07-b46e-24a14661365f","fields":{"slug":"/react-setting-without-cra/"},"frontmatter":{"title":"webpack으로만 React 설정하기 (without CRA)"}}},{"node":{"id":"66383c86-e2c8-533a-90e0-2effae572742","fields":{"slug":"/stylelint-and-husky/"},"frontmatter":{"title":"stylelint와 husky를 통해 컨벤션 통일하기"}}},{"node":{"id":"ed5951d5-beda-5a8f-adb2-07c2fcb38d5e","fields":{"slug":"/OAuth2.0/"},"frontmatter":{"title":"내가 이해한 OAuth2.0"}}},{"node":{"id":"0faec7ad-3bd1-5f5e-9222-115f771df8ed","fields":{"slug":"/tanstack-query-cache-trouble-shooting/"},"frontmatter":{"title":"InfinityQuery에서 fetch가 제대로 이루어지지 않는다?!?!"}}},{"node":{"id":"45eeb9a3-557d-5704-8fd9-925283e1e27b","fields":{"slug":"/restdocs-start/"},"frontmatter":{"title":"RestDocs로 API 문서화하기"}}},{"node":{"id":"663b560a-734d-51a9-a6dc-3c4f50716c74","fields":{"slug":"/spring-event-apply/"},"frontmatter":{"title":"Spring Event 적용하기"}}},{"node":{"id":"55ae8038-3f65-5a59-8db3-c7405e7fc125","fields":{"slug":"/github-actions-cypress/"},"frontmatter":{"title":"피움 Cypress 자동화 구축기"}}},{"node":{"id":"503e9e71-eda3-53d7-8142-7c309faf213e","fields":{"slug":"/why_we_applied_querydsl/"},"frontmatter":{"title":"피움 서비스의 Querydsl 도입 이유"}}},{"node":{"id":"709124d0-5b05-5530-804d-e90ec9856a13","fields":{"slug":"/querydsl_apply_procedure/"},"frontmatter":{"title":"피움 서비스의 Querydsl 적용 과정"}}},{"node":{"id":"5c865dcb-cefd-58be-8968-b5edf6c8080c","fields":{"slug":"/server-logging/"},"frontmatter":{"title":"Logback을 이용해 운영 환경 별 로그 남기기"}}},{"node":{"id":"8269f166-d041-533c-9d44-332d8d8c3dca","fields":{"slug":"/server-monitoring/"},"frontmatter":{"title":"CloudWatch를 이용한 모니터링 환경 구성"}}}]},"previous":{"fields":{"slug":"/acceptance-test-resolve/"},"frontmatter":{"title":"인수테스트 데이터 초기화하기"}},"next":{"fields":{"slug":"/stylelint-and-husky/"},"frontmatter":{"title":"stylelint와 husky를 통해 컨벤션 통일하기"}}},"pageContext":{"id":"15def1d5-c20f-5d07-b46e-24a14661365f","series":null,"previousPostId":"80aa708e-ef8a-5c79-9644-cb8c04d55a63","nextPostId":"66383c86-e2c8-533a-90e0-2effae572742"}},"staticQueryHashes":[],"slicesMap":{}}